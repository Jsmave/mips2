`include "../define.v"
module INSTRUCTION_REGSITER (
    input [`N:0] I_addr,
    input clk,
    output wire [`N:0] Instruction_F
);
  wire en;
  assign en=1;
/*
blk_mem_gen_1 instance_rom1(
  .clka(clk),    // input wire clka
  .ena(en),      // input wire ena
  .addra(I_addr[11:2]),  // input wire [9 : 0] addra
  .douta(Instruction_F)  // output wire [31 : 0] douta
);
*/
//modelsim test
/* */
  reg [31:0] rom [9:0];
  //ram test
  //always@(posedeg clk)begin
  //  if(en) rom[I_addr[11:2]]<= data_in;
  //end
  
  //assign Instruction_F[7:0] = rom[{I_addr[11:2],2'b00}];
  //assign Instruction_F[15:8] = rom[{I_addr[11:2],2'b01}];
  //assign Instruction_F[23:16] = rom[{I_addr[11:2],2'b10}];
  //assign Instruction_F[31:24] = rom[{I_addr[11:2],2'b11}];
  assign Instruction_F = rom[I_addr[9:0]];
  initial begin
    rom[0]<=`Nop;
    rom[1]<=32'h20020012;
    rom[2]<=`Nop;
    rom[3]<=`Nop;
    rom[4]<=`Nop;
    rom[5]<=`Nop;
    rom[6]<=`Nop;
    rom[7]<=32'h2042fffe;
  end
/**/

endmodule
